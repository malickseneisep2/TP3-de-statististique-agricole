#2.2 Analyse de la productivité

#8. Calculer pour chaque ménage l’indice de diversité des cultures

# Calculer la somme des superficies cultivées par chaque ménage
somme_superficie_menage = base_produc_final.groupby('id_men')['superficie'].transform('sum')

# Calculer le quotient au carré de la superficie de chaque culture par la somme des superficies cultivées par chaque ménage
quotient_superficie = (base_produc_final['superficie'] / somme_superficie_menage)*(base_produc_final['superficie'] / somme_superficie_menage)

# Faire la somme des quotients au carré pour chaque ménage
somme_quotients_menage = quotient_superficie.groupby(base_produc_final['id_men']).sum()

#Indice de diversité
indice_diversite = 1 - somme_quotients_menage
base_produc_final['indice_diversite'] = indice_diversite

#9. Calculer pour chaque ménage les rendements des différentes cultures(céréales + arachide + niébé)

# Définir les cultures spécifiées céréales+ Arachide + niébé
cultures_specifiees = ['Mil', 'Riz', 'Sorgho', 'Fonio', 'Arachide', 'Niébé','Mais']

# Calculer les rendements pour chaque culture spécifiée
base_produc_final['rendement_cul'] = base_produc_final.loc[base_produc_final['culture_label'].isin(cultures_specifiees), 'production_kg'] / base_produc_final.loc[base_produc_final['culture_label'].isin(cultures_specifiees), 'superficie']

#10. Calculer la part de l’arachide dans les superficies emblavées. Cette part est-elle différente
#selon que le ménage emblave plus de 5ha? Utiliser la commande ttest pour tester la significativité de cette différence.

from scipy.stats import ttest_ind

# Calculer la part de l'arachide dans les superficies emblavées pour chaque ménage
base_produc_final['part_arachide'] = base_produc_final.loc[base_produc_final['culture_label'] == 'Arachide', 'superficie'] / base_produc_final.groupby('id_men')['superficie'].transform('sum')

# Diviser les données en deux groupes
menages_plus_5ha = base_produc_final[base_produc_final['superficie'] > 5]
menages_moins_ou_egal_5ha = base_produc_final[base_produc_final['superficie'] <= 5]

# Effectuer le test t pour comparer les moyennes des parts d'arachide entre les deux groupes
t_stat, p_value = ttest_ind(menages_plus_5ha['part_arachide'].dropna(), menages_moins_ou_egal_5ha['part_arachide'].dropna())

print("Statistique t :", t_stat)
print("p-value :", p_value)

#11. Calculer pour chaque département, la part des différentes spéculations dans les superficies
#emblavées et produire le diagramme circulaire correspondant.

# Calculer la somme des superficies pour chaque département et chaque spéculations
sup_par_dep_spec= base_produc_final.groupby(['departements', 'culture_label'])['superficie'].sum().reset_index()

# Pivoter les données pour avoir les spéculations comme colonnes
sup_pivot = sup_par_dep_spec.pivot(index='departements', columns='culture_label', values='superficie')

# Calculer la part des différentes spéculations dans les superficies emblavées pour chaque département
sup_pourcentage = sup_pivot.div(sup_pivot.sum(axis=1), axis=0) * 100

import matplotlib.pyplot as plt
# Calculer la somme des superficies pour chaque département et chaque spéculations
sup_par_dep_spec = base_produc_final.groupby(['departements', 'culture_label'])['superficie'].sum().reset_index()

# Pivoter les données pour avoir les spéculations comme colonnes
sup_pivot = sup_par_dep_spec.pivot(index='departements', columns='culture_label', values='superficie')

# Calculer la part des différentes spéculations dans les superficies emblavées pour chaque département
sup_pourcentage = sup_pivot.div(sup_pivot.sum(axis=1), axis=0) * 100

# Remplacer les valeurs manquantes par zéro
sup_pourcentage.fillna(0, inplace=True)

# Liste des départements
departements = sup_pourcentage.index

# Créer un diagramme circulaire pour chaque département
for departement in departements:
    fig, ax = plt.subplots(figsize=(8, 8))
    sup_pourcentage.loc[departement].plot.pie(ax=ax, autopct='%1.1f%%', legend=False, cmap='tab20')
    ax.set_title(f"Part des différentes spéculations dans les superficies emblavées - {departement}")
    plt.show()

#12. Calculer pour chaque département les rendements des différentes cultures. Exporter le
#tableau dans un fichier Excel

# Filtrer la base de données pour ne conserver que les cultures spécifiées
base_produc_filtree = base_produc_final[base_produc_final['culture_label'].isin(cultures_specifiees)]

# Calculer la somme des superficies pour chaque département
superficie_par_departement = base_produc_filtree.groupby('departements')['superficie'].sum()

# Calculer la production totale par culture et par département
production_totale = base_produc_filtree.groupby(['departements', 'culture_label'])['production_kg'].sum().reset_index()

# Fusionner les données de superficie par département avec les données de production totale
production_totale = production_totale.merge(superficie_par_departement, left_on='departements', right_index=True, suffixes=('_par_culture', '_par_departement'))

# Calculer les rendements en divisant la production totale par les superficies par département
production_totale['rendement'] = production_totale['production_kg'] / production_totale['superficie']

# Exportation de la base
production_totale.to_excel("rendements_par_departement.xlsx", index=False)
